public class PiEstimator {
    // add any desired fields here
    private long threads;
    private long points;
    private double piTot;
    private double retPi;

    // constructor taking in the number of sample points, numPoints, 
    // and the number of threads used to compute the estimate
    public PiEstimator (long numPoints, int numThreads) {
        this.threads = numThreads;
        this.points = numPoints;
    }

    // compute the estimate of pi (improve this description!)
    public double getPiEstimate () {
	    Thread[] threadArr = new Thread[this.threads];

        // initialize threads 
	    for (int i = 0; i < NUM_THREADS; i++) {
	        threadArr[i] = new PiThread(this.points/this.threads);
    	}

        // start all of the threads
        for (PiThread t : threads) {
            t.start();
            this.piTot += t.getPi;
        }

        this.retPi = this.piTot / this.threads;
        return this.retPi;
    }
}
